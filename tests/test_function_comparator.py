from unittest.mock import Mock
import pytest
from reccmp.isledecomp.compare.db import EntityDb, ReccmpMatch
from reccmp.isledecomp.compare.diff import DiffReport
from reccmp.isledecomp.compare.event import ReccmpReportProtocol
from reccmp.isledecomp.compare.functions import FunctionComparator
from reccmp.isledecomp.formats.pe import PEImage
from reccmp.isledecomp.types import EntityType
from reccmp.isledecomp.utils import print_combined_diff


@pytest.fixture(name="db")
def fixture_db() -> EntityDb:
    return EntityDb()


@pytest.fixture(name="report")
def fixture_report_mock() -> ReccmpReportProtocol:
    return Mock(spec=ReccmpReportProtocol)


def run_diff(
    db: EntityDb, orig: bytes, recomp: bytes, report: ReccmpReportProtocol
) -> DiffReport:
    """If no addresses are known, placeholders for direct and indirect lookup must be distinct"""

    orig_bin = Mock(PEImage)
    orig_bin.read = Mock(return_value=orig)
    orig_bin.imagebase = 0
    recomp_bin = Mock(PEImage)
    recomp_bin.read = Mock(return_value=recomp)
    recomp_bin.imagebase = 0

    comp = FunctionComparator(db, orig_bin, recomp_bin, report, "unittest")

    return comp.compare_function(
        ReccmpMatch(
            0x200,
            0x400,
            f'{{"type":1,"stub":false,"name":"unittest","symbol":"?Unittest","size":{len(recomp)}}}',
        )
    )


def test_simple_identical_diff(db: EntityDb, report: ReccmpReportProtocol):
    # based on BETA10 0x1013e61d
    code = b"U\x8b\xec\x83\xec,SVWf\xc7E\xf8\x00\x00f\xc7E\xf0\x00\x00\x8bE\x14"

    diffreport = run_diff(db, code, code, report)

    assert diffreport.ratio == 1.0
    assert diffreport.udiff == []


def test_simple_nontrivial_diff(db: EntityDb, report: ReccmpReportProtocol):
    orig = b"f\xc7E\xf8\x00\x00f\xc7E\xf0\x00\x00\x8b\x45\x14"
    # one instruction modified
    recm = b"f\xc7E\xf8\x00\x00f\xc7E\xf0\x00\x00\x8b\x51\x14"

    diffreport = run_diff(db, orig, recm, report)

    assert diffreport.ratio < 1.0
    assert diffreport.udiff is not None

    assert diffreport.udiff[0] == (
        "@@ -0x200,3 +0x400,3 @@",
        [
            {
                "both": [
                    ("0x200", "mov word ptr [ebp - 8], 0", "0x400"),
                    ("0x206", "mov word ptr [ebp - <OFFSET1>], 0", "0x406"),
                ]
            },
            {
                "orig": [("0x20c", "mov eax, dword ptr [ebp + 0x14]")],
                "recomp": [("0x40c", "mov edx, dword ptr [ecx + 0x14]")],
            },
        ],
    )

def test_diff_with_line_match(db: EntityDb, report: ReccmpReportProtocol):
    # TODO: WIP
    # TODO: Replace address by fake one
    # orig_addr = 269739666 - 0x1013e61d + 0x200
    orig_addr = 0x200 + 117
    recomp_addr = 0x400 + 93
    db.set_recomp_symbol(recomp_addr, name="cppfile.cpp:384", filename="src\\cppfile.cpp", line=384)
    db.set_pair(orig_addr, recomp_addr, EntityType.LINE)

    # orig = b'U\x8b\xec\x83\xec,SVWf\xc7E\xf8\x00\x00f\xc7E\xf0\x00\x00\x8bE\x14f\x8b@\x08f\x89E\xf4f\xc7E\xe8\x00\x00\x0f\xbfE\xf4\x0f\xbfM\xf8\x03\xc1Hf\x89E\xfc\x8bE\x10\x89E\xec\x8bE\xecf\x8b\x00f\x89E\xe0\x83E\xec\x02\x8bE\x143\xc9f\x8bH\n\x0f\xbfE\xf0+\xc8If\x89M\xd8\xe9\xd1\x01\x00\x00\xe9\x0e\x00\x00\x00\x0f\xbfE\xe8\x0f\xbfM\xd8\x03\xc1f\x89E\xd8\x8bE\xecf\x8b\x00f\x89E\xe8\x83E\xec\x02\x0f\xbfE\xe8\x85\xc0\x0f\x8c\n\x00\x00\x00\xe9\x9a\x01\x00\x00\xe9h\x00\x00\x00\xf6E\xe9@\x0f\x84\x05\x00\x00\x00\xe9\xbf\xff\xff\xff\x8bE\xe8P\x8bE\xd8P\x8bE\xfcP\x8bE\x0cP\x8bE\x08P\xe8\xa2\xf6\xff\xff\x83\xc4\x14\x8bE\xecf\x8b\x00f\x89E\xe8\x83E\xec\x02\x0f\xbfE\xe8\x85\xc0\x0f\x85#\x00\x00\x00f\xffM\xd8f\xffM\xe0\x0f\xbfE\xe0\x85\xc0\x0f\x8e\x05\x00\x00\x00\xe9~\xff\xff\xff\xe9-\x01\x00\x00\xe9#\x01\x00\x00f\x8bE\xf8f\x89E\xdc\x8bE\xec3\xc9\x8a\x08\x0f\xbfE\xdc\x03\xc8f\x89M\xdc\xffE\xec\x8bE\xecf\x0f\xbe\x00f\x89E\xe4\xffE\xec\x0f\xbfE\xe4\x0f\xbfM\xe4\x03\xc1f\x89E\xe4\x0f\xbfE\xe4\x85\xc0\x0f\x8ch\x00\x00\x00\x8bE\xe4P\x8bE\xecP\x8bE\xd8P\x8bE\xdcP\x8bE\x0cP\x8bE\x08P\xe8p\xf6\xff\xff\x83\xc4\x18\x0f\xbfE\xe4\x0f\xbfM\xdc\x03\xc1f\x89E\xdc\x0f\xbfE\xe4\x01E\xecf\xffM\xe8\x0f\xbfE\xe8\x85\xc0\x0f\x84\x05\x00\x00\x00\xe9z\xff\xff\xfff\xffM\xd8f\xffM\xe0\x0f\xbfE\xe0\x85\xc0\x0f\x8e\x05\x00\x00\x00\xe9\xcd\xfe\xff\xff\xe9w\x00\x00\x00\x0f\xbfE\xe4\xf7\xd8f\x89E\xe4\x8bE\xec\x89E\xd4\x83E\xec\x02\x0f\xbfE\xe4\xc1\xf8\x01P\x8bE\xd4f\x8b\x00P\x8bE\xd8P\x8bE\xdcP\x8bE\x0cP\x8bE\x08P\xe8\xec\xf7\xff\xff\x83\xc4\x18\x0f\xbfE\xe4\x0f\xbfM\xdc\x03\xc1f\x89E\xdcf\xffM\xe8\x0f\xbfE\xe8\x85\xc0\x0f\x84\x05\x00\x00\x00\xe9\xfe\xfe\xff\xfff\xffM\xd8f\xffM'
    # recm = b"U\x8b\xec\x83\xec,SVWf\xc7E\xe4\x00\x00f\xc7E\xe0\x00\x00\x8bE\x14f\x8b@\x08f\x89E\xf8f\xc7E\xf0\x00\x00\x0f\xbfE\xf8\x0f\xbfM\xe4\x03\xc1Hf\x89E\xe8\x8bE\x10\x89E\xf4\x8bE\xf4f\x8b\x00f\x89E\xec\x83E\xf4\x02\x8bE\x143\xc9f\x8bH\n\x0f\xbfE\xe0+\xc8If\x89M\xfc\x8bE\xf4f\x8b\x00f\x89E\xf0\x83E\xf4\x02\x0f\xbfE\xf0\x85\xc0\x0f\x8d~\x00\x00\x00\x0f\xbfE\xf0\xf6\xc4@\x0f\x84\x13\x00\x00\x00\x0f\xbfE\xfc\x0f\xbfM\xf0\x03\xc1f\x89E\xfc\xe9a\x01\x00\x00\x8bE\xf0P\x8bE\xfcP\x8bE\xf8P\x8bE\x0cP\x8bE\x08P\xe8\xb3\xf6\xff\xff\x83\xc4\x14\x8bE\xf4f\x8b\x00f\x89E\xf0\x83E\xf4\x02\x0f\xbfE\xf0\x85\xc0\x0f\x85\x1e\x00\x00\x00f\xffM\xfcf\xffM\xec\x0f\xbfE\xec\x85\xc0\x0f\x8f\x05\x00\x00\x00\xe9'\x01\x00\x00\xe9\x05\x00\x00\x00\xe9\x18\x01\x00\x00\xe9\x05\x00\x00\x00\xe9\x0e\x01\x00\x00f\x8bE\xe4f\x89E\xdc\x8bE\xf4\x0f\xbf\x00\x0f\xbfM\xdc\x03\xc1f\x89E\xdc\x83E\xf4\x02\x8bE\xf4f\x0f\xbe\x00f\x89E\xd8\x83E\xf4\x02\x0f\xbfE\xd8\x0f\xbfM\xd8\x03\xc1f\x89E\xd8\x0f\xbfE\xd8\x85\xc0\x0f\x8cQ\x00\x00\x00\x8bE\xd8P\x8bE\xf4P\x8bE\xfcP\x8bE\xdcP\x8bE\x0cP\x8bE\x08P\xe8v\xf6\xff\xff\x83\xc4\x18\x0f\xbfE\xd8\x0f\xbfM\xdc\x03\xc1f\x89E\xdc\x0f\xbfE\xd8\x03\xc0\x01E\xf4f\xffM\xf0\x0f\xbfE\xf0\x85\xc0\x0f\x85\x05\x00\x00\x00\xe9i\x00\x00\x00\xe9_\x00\x00\x00\x0f\xbfE\xd8\xf7\xd8f\x89E\xd8\x8bE\xf4f\x8b\x00f\x89E\xd4\x83E\xf4\x02\x0f\xbfE\xd8\xc1\xf8\x01P\x8bE\xd4P\x8bE\xfcP\x8bE\xdcP\x8bE\x0cP\x8bE\x08P\xe8\x08\xf8\xff\xff\x83\xc4\x18\x0f\xbfE\xd8\x0f\xbfM\xdc\x03\xc1f\x89E\xdcf\xffM\xf0\x0f\xbfE\xf0\x85\xc0\x0f\x85\x05\x00\x00\x00\xe9\x05\x00\x00\x00\xe9\x0e\xff\xff\xfff\xffM\xfcf\xffM\xec\x0f\xbfE\xec\x85\xc0\x0f\x8fU\xfe\xff\xff\xe9\x00\x00\x00\x00_^[\xc9\xc3"


    orig_raw = bytearray(b'U\x8b\xec\x83\xec,SVWf\xc7E\xf8\x00\x00f\xc7E\xf0\x00\x00\x8bE\x14f\x8b@\x08f\x89E\xf4f\xc7E\xe8\x00\x00\x0f\xbfE\xf4\x0f\xbfM\xf8\x03\xc1Hf\x89E\xfc\x8bE\x10\x89E\xec\x8bE\xecf\x8b\x00f\x89E\xe0\x83E\xec\x02\x8bE\x143\xc9f\x8bH\n\x0f\xbfE\xf0+\xc8If\x89M\xd8\xe9\xd1\x01\x00\x00\xe9\x0e\x00\x00\x00\x0f\xbfE\xe8\x0f\xbfM\xd8\x03\xc1f\x89E\xd8\x8bE\xecf\x8b\x00f\x89E\xe8\x83E\xec\x02\x0f\xbfE\xe8\x85\xc0\x0f\x8c\n\x00\x00\x00\xe9\x9a\x01\x00\x00\xe9h\x00\x00\x00\xf6E\xe9@\x0f\x84\x05\x00\x00\x00\xe9\xbf\xff\xff\xff\x8bE\xe8P\x8bE\xd8P\x8bE\xfcP\x8bE\x0cP\x8bE\x08P\xe8\xa2\xf6\xff\xff\x83\xc4\x14\x8bE\xecf\x8b\x00f\x89E\xe8\x83E\xec\x02\x0f\xbfE\xe8\x85\xc0\x0f\x85#\x00\x00\x00f\xffM\xd8f\xffM\xe0\x0f\xbfE\xe0\x85\xc0\x0f\x8e\x05\x00\x00\x00\xe9~\xff\xff\xff\xe9-\x01\x00\x00\xe9#\x01\x00\x00f\x8bE\xf8f\x89E\xdc\x8bE\xec3\xc9\x8a\x08\x0f\xbfE\xdc\x03\xc8f\x89M\xdc\xffE\xec\x8bE\xecf\x0f\xbe\x00f\x89E\xe4\xffE\xec\x0f\xbfE\xe4\x0f\xbfM\xe4\x03\xc1f\x89E\xe4\x0f\xbfE\xe4\x85\xc0\x0f\x8ch\x00\x00\x00\x8bE\xe4P\x8bE\xecP\x8bE\xd8P\x8bE\xdcP\x8bE\x0cP\x8bE\x08P\xe8p\xf6\xff\xff\x83\xc4\x18\x0f\xbfE\xe4\x0f\xbfM\xdc\x03\xc1f\x89E\xdc\x0f\xbfE\xe4\x01E\xecf\xffM\xe8\x0f\xbfE\xe8\x85\xc0\x0f\x84\x05\x00\x00\x00\xe9z\xff\xff\xfff\xffM\xd8f\xffM\xe0\x0f\xbfE\xe0\x85\xc0\x0f\x8e\x05\x00\x00\x00\xe9\xcd\xfe\xff\xff\xe9w\x00\x00\x00\x0f\xbfE\xe4\xf7\xd8f\x89E\xe4\x8bE\xec\x89E\xd4\x83E\xec\x02\x0f\xbfE\xe4\xc1\xf8\x01P\x8bE\xd4f\x8b\x00P\x8bE\xd8P\x8bE\xdcP\x8bE\x0cP\x8bE\x08P\xe8\xec\xf7\xff\xff\x83\xc4\x18\x0f\xbfE\xe4\x0f\xbfM\xdc\x03\xc1f\x89E\xdcf\xffM\xe8\x0f\xbfE\xe8\x85\xc0\x0f\x84\x05\x00\x00\x00\xe9\xfe\xfe\xff\xfff\xffM\xd8f\xffM')
    recomp_raw = bytearray(b"U\x8b\xec\x83\xec,SVWf\xc7E\xe4\x00\x00f\xc7E\xe0\x00\x00\x8bE\x14f\x8b@\x08f\x89E\xf8f\xc7E\xf0\x00\x00\x0f\xbfE\xf8\x0f\xbfM\xe4\x03\xc1Hf\x89E\xe8\x8bE\x10\x89E\xf4\x8bE\xf4f\x8b\x00f\x89E\xec\x83E\xf4\x02\x8bE\x143\xc9f\x8bH\n\x0f\xbfE\xe0+\xc8If\x89M\xfc\x8bE\xf4f\x8b\x00f\x89E\xf0\x83E\xf4\x02\x0f\xbfE\xf0\x85\xc0\x0f\x8d~\x00\x00\x00\x0f\xbfE\xf0\xf6\xc4@\x0f\x84\x13\x00\x00\x00\x0f\xbfE\xfc\x0f\xbfM\xf0\x03\xc1f\x89E\xfc\xe9a\x01\x00\x00\x8bE\xf0P\x8bE\xfcP\x8bE\xf8P\x8bE\x0cP\x8bE\x08P\xe8\xb3\xf6\xff\xff\x83\xc4\x14\x8bE\xf4f\x8b\x00f\x89E\xf0\x83E\xf4\x02\x0f\xbfE\xf0\x85\xc0\x0f\x85\x1e\x00\x00\x00f\xffM\xfcf\xffM\xec\x0f\xbfE\xec\x85\xc0\x0f\x8f\x05\x00\x00\x00\xe9'\x01\x00\x00\xe9\x05\x00\x00\x00\xe9\x18\x01\x00\x00\xe9\x05\x00\x00\x00\xe9\x0e\x01\x00\x00f\x8bE\xe4f\x89E\xdc\x8bE\xf4\x0f\xbf\x00\x0f\xbfM\xdc\x03\xc1f\x89E\xdc\x83E\xf4\x02\x8bE\xf4f\x0f\xbe\x00f\x89E\xd8\x83E\xf4\x02\x0f\xbfE\xd8\x0f\xbfM\xd8\x03\xc1f\x89E\xd8\x0f\xbfE\xd8\x85\xc0\x0f\x8cQ\x00\x00\x00\x8bE\xd8P\x8bE\xf4P\x8bE\xfcP\x8bE\xdcP\x8bE\x0cP\x8bE\x08P\xe8v\xf6\xff\xff\x83\xc4\x18\x0f\xbfE\xd8\x0f\xbfM\xdc\x03\xc1f\x89E\xdc\x0f\xbfE\xd8\x03\xc0\x01E\xf4f\xffM\xf0\x0f\xbfE\xf0\x85\xc0\x0f\x85\x05\x00\x00\x00\xe9i\x00\x00\x00\xe9_\x00\x00\x00\x0f\xbfE\xd8\xf7\xd8f\x89E\xd8\x8bE\xf4f\x8b\x00f\x89E\xd4\x83E\xf4\x02\x0f\xbfE\xd8\xc1\xf8\x01P\x8bE\xd4P\x8bE\xfcP\x8bE\xdcP\x8bE\x0cP\x8bE\x08P\xe8\x08\xf8\xff\xff\x83\xc4\x18\x0f\xbfE\xd8\x0f\xbfM\xdc\x03\xc1f\x89E\xdcf\xffM\xf0\x0f\xbfE\xf0\x85\xc0\x0f\x85\x05\x00\x00\x00\xe9\x05\x00\x00\x00\xe9\x0e\xff\xff\xfff\xffM\xfcf\xffM\xec\x0f\xbfE\xec\x85\xc0\x0f\x8fU\xfe\xff\xff\xe9\x00\x00\x00\x00_^[\xc9\xc3")

    # XXX WIP: Locate the interesting part
    # Next steps:
    # - Make the LINE pin work in the unit test
    # - Make sure the pin still works after cutting off code
    # - Shorten the code to be as minimal as possible
    for i in range(86):
        orig_raw[i] = 0x55
        recomp_raw[i] = 0x55

    for i in range(150, len(recomp_raw)):
        orig_raw[i] = 0x55
        recomp_raw[i] = 0x55


    orig_raw = bytes(orig_raw)
    recomp_raw = bytes(recomp_raw)

    diffreport = run_diff(db, orig_raw, recomp_raw, report)

    assert diffreport.ratio < 1.0
    assert diffreport.udiff is not None

    print_combined_diff(diffreport.udiff)
    print("Done")


